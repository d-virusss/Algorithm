#include <iostream>
#include <queue>
#include <ctime>
using namespace std;

int n;
int weight_matrix[16][16];
int min_length = 789789;
int opt_tour[16];

typedef struct {
	int level;
	int path[16] = { 0, };
	int bound = -1;
}node;

struct cmp
{
	bool operator()(node &a, node &b) {
		return a.bound > b.bound;
	}
};

int bound(node& x) { // 한계값 구하는 함수
	bool check_vertex[16] = { 0, };
	int bound_val = 0;
	int min_bound;
	for (int i = 0; i < x.level; i++) {
		bound_val += weight_matrix[x.path[i + 1]][x.path[i + 2]];
		check_vertex[x.path[i + 2]] = true; // 방문한 vertex 표시
	}
	for (int i = 1+x.level; i <= n; i++) {
		if (check_vertex[i] == true)
			continue;
		min_bound = 78978999;
		for (int j = 1; j <= n; j++) {
			if (i == j || check_vertex[j])
				continue;
			else {
				if (weight_matrix[i][j] < min_bound)
					min_bound = weight_matrix[i][j];
			}
		}
		bound_val += min_bound;
	}
	return bound_val;
}

int get_length(node x) { // 경로를 알 때 이동길이구하는 함수
	int distance = 0;
	for (int i = 1; i <= n; i++) {
		distance += weight_matrix[x.path[i]][x.path[i + 1]];
	}
	return distance;
}

bool check_path(node x, int i) { // i가 path안에 없어야 함, 있으면 false 없으면 true 반환
	int index = 1;
	while (x.path[index]) {
		if (x.path[index] == i)
			return false;
		index++;
	}
	return true;
}

void copy_array(int* dest, int* src) {
	for (int i = 1; i <= 16; i++) {
		dest[i] = src[i];
	}
}

void insert_path(int x, int* u) { // path 의 마지막에 i 삽입
	for (int i = n; i >= 1; i--) {
		if (u[i] == 0)
			continue;
		else
			u[i + 1] = x; break;
	}
}

void complete_tour(node& x) {
	int sum = n*(n + 1) / 2;
	for (int i = 1; i <= n; i++) {
		sum -= x.path[i];
	}

	insert_path(sum, x.path);
	insert_path(1, x.path);
}

void TSP() {
	priority_queue <node, vector<node>, cmp > pq;
	node u, v;

	v.level = 0;
	v.path[1] = 1;
	v.bound = bound(v);
	pq.push(v);

	while (!pq.empty()) {
		node tmp;
		tmp = pq.top();
		pq.pop();

		if (tmp.bound < min_length) {
			u.level = tmp.level + 1;
			for (int i = 2; i <= n; i++) {
				if (check_path(tmp, i)) {
					copy_array(u.path, tmp.path);
					insert_path(i, u.path);
					if (u.level == n - 2) {
						complete_tour(u);
						if (get_length(u) < min_length) {
							min_length = get_length(u);
							copy_array(opt_tour, u.path);
						}
					}
					else {
						u.bound = bound(u);
						if (u.bound < min_length)
							pq.push(u);
					}
				}
			}
		}
	}
}

void answer() {
	cout << min_length << '\n';
	for (int i = 1; i <= n+1; i++) {
		cout << opt_tour[i] << ' ';
	}
}

int main()
{
	clock_t start, end;
	double result;

	cin >> n;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			cin >> weight_matrix[i][j];
		}
	}
	start = clock();
	TSP();
	answer();
	end = clock();
	result = (double)(end - start);
	cout << endl << result;

	return 0;
}